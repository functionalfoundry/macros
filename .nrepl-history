(require '[workflo.macros.specs.om-query :as om-specs] :reload)
(s/exercise ::om-specs/no-parameterized-vs-unparameterized-conflicts)
(s/exercise ::om-specs/query)
(require '[workflo.macros.specs.om-query :as om-specs] :reload)
(s/exercise ::om-specs/query)
(require '[workflo.macros.specs.om-query :as om-specs] :reload)
(s/exercise ::om-specs/query)
(s/gen ::om-specs/query)
(s/exercise ::om-specs/query)
(require '[workflo.macros.specs.om-query :as om-specs] :reload)
(s/exercise ::om-specs/query)
(require '[workflo.macros.specs.om-query :as om-specs] :reload)
(s/exercise ::om-specs/query)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(s/exercise ::om-specs/query)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(s/exercise ::om-specs/query)
(s/generate ::om-specs/query)
(gen/generate ::om-specs/query)
(require '[clojure.spec.gen :as gen])
(gen/generate ::om-specs/query)
(gen/generate (s/gen ::om-specs/query))
(gen/generate (s/gen ::om-specs/query) 1)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query) 1)
(gen/sample (s/gen ::om-specs/property) 1)
(gen/sample (s/gen ::om-specs/property))
(gen/sample (s/gen ::om-specs/property) 1)
(gen/sample (s/gen (s/and ::om-specs/property #(keyword? %))) 1)
(gen/sample (s/gen (s/and ::om-specs/keyword #(keyword? %))) 1)
(gen/sample (s/gen (s/and ::om-specs/keyword #(keyword? %))) 10)
(gen/sample (s/gen (s/and ::om-specs/keyword #(keyword? %))) 2)
(gen/sample (s/gen (s/and ::om-specs/keyword #(keyword? %))) 2\1)
(gen/sample (s/gen (s/and ::om-specs/keyword #(keyword? %))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(keyword? %))) 1)
(gen/sample (s/gen (s/and ::om-specs/keyword #(do (println %) (keyword? %)))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(do (println %) (keyword? %)))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(do (println ">> %") (keyword? %)))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(do (println ">>" %) (keyword? %)))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(do (println ">>" %) (keyword? %2)))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(do (println ">>" %) (keyword? %1)))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(do (println ">>" %) (keyword? (s/unconform ::om-specs/join-source %))))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(do (println ">>" %) (keyword? (s/unform ::om-specs/join-source %))))) 1)
(gen/sample (s/gen (s/and ::om-specs/join-source #(do (println ">>" (s/unform ::om-specs/join-source %)) (keyword? (s/unform ::om-specs/join-source %))))) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
exit
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(require '[clojure.spec.gen :as gen])
(require '[clojure.spec.test :as st])
(require '[clojure.spec :as s])
(gen/sample (s/gen ::om-specs/query) 1)
(gen/sample (s/gen ::om-specs/property) 1)
::om-specs
::om-specs/query
(gen/sample (s/gen ::om-specs/property))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/property))
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/query))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(require '[clojure.spec :as s])
(require '[clojure.spec.test :as st])
(require '[clojure.spec.gen :as gen])
(gen/sample (s/gen ::om-specs/query))
(gen/sample (s/gen ::om-specs/property))
(gen/sample (s/gen ::om-specs/join))
(gen/sample (s/gen ::om-specs/join-target))
::om-specs
::om-specs/join-target
(gen/sample (s/gen ::om-specs/join-target))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target))
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(gen/sample (s/gen ::om-specs/join-target) 1)
(require '[workflo.macros.specs.om-query :as om-specs] :reload-all)
(require '[clojure.spec :as s])
(require '[clojure.spec.gen :as gen])
(gen/sample (s/gen ::om-specs/join-target) 1)
(require '[clojure.spec.gen :as gen])
(gen/sample (s/gen ::om-specs/join-target) 1)
(require '[clojure.spec :as s])
(doc clojure.spec/unform)
(s/unform vector? [:foo :bar])
(s/unform (s/or :vector vector? :set set?) [:foo :bar])
(s/unform (s/or :vector vector? :set set?) [:vector [:foo :bar]])
(s/unform (s/or :vector vector? :set set?) [:set [:foo :bar]])
(s/unform (s/or :vector vector? :set set?) [:set #{:foo :bar}])
exit
(require '[workflo.macros.query.om-next :as om-query] :reload)
(om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :bar})])
(require '[workflo.macros.query.om-next :as om-query] :reload)
(om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :bar})])
(require '[workflo.macros.query.om-next :as om-query] :reload)
(om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :bar})])
(require '[workflo.macros.query.om-next :as om-query] :reload)
(om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :bar})])
(require '[workflo.macros.query.om-next :as om-query] :reload)
(om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :bar})])
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :bar})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :bar})]))
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]}]))
(clojure.pprint/pprint (om-query/disambiguate '[:foo :foo]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[:foo :foo]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[:foo :foo]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[:foo :foo]))
(clojure.pprint/pprint (om-query/disambiguate '[:foo {:foo [:bar]}]))
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :bar})]))
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
(require '[workflo.macros.query.om-next :as om-query] :reload)
(clojure.pprint/pprint (om-query/disambiguate '[{:foo [:bar]} {:foo [:baz :ruux]} ({:bar [:bazzz :ruux]} {:foo :bar}) ({:bar [:baz]} {:foo :baz})]))
exit
(require '[clojure.test :as test])
(require '[workflo.macros.query.om-next :as om-next])
(require '[workflo.macros.query.om-next :as om-next] :reload)
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload)
(clojure.test/run-tests 'workflo.macros.query.om-next-test)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next))
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-tests))
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[clojure.test :as test])
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(require '[clojure.test :as test])
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[clojure.test :as test])
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(require '[clojure.test :as test])
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[clojure.test :as test])
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
quit
(require '[workflo.macros.query.om-next-test :as om-next-tests] :reload-all)
(require '[clojure.test :as test])
(do (require '[workflo.macros.query.om-next :as om-next] :reload) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
(do (require '[workflo.macros.query.om-next :as om-next] :reload-all) (clojure.test/run-tests 'workflo.macros.query.om-next-test))
quit
(require 'workflo.macros.util.form :reload)
(in-ns 'workflo.macros.util.form)
(require '[clojure.spec.alpha :as s])
(s/exercise ::conforming-form)
(map first (s/exercise ::conforming-form))
(map first (s/exercise ::conforming-form 100))
(def forms (map first (s/exercise ::conforming-form 100)))
(doall (map form->defn forms))
(doseq [form forms]
  (try (form->defn form)
    (catch Exception error
      (println "Failed:" error)
      (println "Form:" form))))
(doseq [form forms]
  (form->defn form))
forms
(doseq [form forms] (println "FORM" form))
(doseq [form forms] (form->defn form))
(form->defn :foo)
(doall (map form->defn forms))
(s/instrument)
(clojure.spec.test/instrument)
(clojure.spec.test.alpha/instrument)
(require '[clojure.spec.test.alpha :as st])
(st/instrument)
(doall (map form->defn forms))
(doall (map identity forms))
(doall (map (fn [form] (try (form->defn form) (catch Exception error (println "FORM" form "ERROR" error)))) forms))
(s/conform {:form-name 'foo :form-body 0})
(s/conform ::form {:form-name 'foo :form-body 0})
(s/conform ::conforming-form {:form-name 'foo :form-body 0})
(try (doall (map identity forms)) (catch Exception error (println "ERROR:" error)))
(try (doall (map form->defn forms)) (catch Exception error (println "ERROR:" error)))
(clojure.pprint/pprint forms)
(form->defn {:form-name 'foo :form-body 0})
(st/uninstrument)
(st/instrument)
(st/uninstrument)
(st/unstrument)
(form->defn {:form-name 'foo :form-body 0})
(try (form->defn {:form-name 'foo :form-body 0}) (catch Exception error (println "ERROR:" error))
)
(form->defn {:form-name 'foo :form-body 0})
(require 'workflo.macros.util.form :reload)
(form->defn {:form-name 'foo :form-body 0})
(require 'workflo.macros.util.form :reload)
(form->defn {:form-name 'foo :form-body 0})
(require 'workflo.macros.util.form :reload)
(form->defn {:form-name 'foo :form-body 0})
(require 'workflo.macros.util.form :reload)
(form->defn {:form-name 'foo :form-body 0})
quit
(require '[workflo.macros.view :as view])
(clojure.pprint/pprint (macroexpand-1 '(view/defview Foo (componentDidUpdate (println "Hello")))))
(clojure.pprint/pprint (macroexpand-1 '(view/defview Foo (computed [foo]) (componentDidUpdate (println "Hello")))))
(clojure.pprint/pprint (macroexpand-1 '(view/defview Foo (computed [foo]) (componentDidUpdate (println "Hello")) (render "Hello"))))
exit
(require 'workflo.macros.entity.schema)
(in-ns 'workflo.macros.entity.schema)
(require '[clojure.spec :as s])
(clojure.core/require '[clojure.spec :as s])
(clojure.core/require '[clojure.spec.alpha :as s])
(clojure.core/require '[workflo.macros.specs.types :as t])
(s/def :some/attr (s/and (t/entity-ref 'foo) ::t/indexed))
(s/get-spec :some-attr)
(s/get-spec :some/attr)
(value-spec-schema (s/get-spec :some/attr))
(require 'workflo.macros.entity.schema :reload)
(in-ns 'workflo.macros.entity.schema)
(value-spec-schema (s/get-spec :some/attr))
(s/def :some/attr (t/entity-ref 'foo))
(s/def :some/attr (s/and :t/enum #{:foo :bar}))
(value-spec-schema (s/get-spec :some/attr))
(s/def :some/attr (s/and ::t/enum #{:foo :bar}))
(value-spec-schema (s/get-spec :some/attr))
(s/def :some/attr (t/entity-ref 'foo))
(value-spec-schema (s/get-spec :some/attr))
(workflo.macros.entity/registered-entities)
(require 'workflo.macros.entity)
(require 'workflo.macros.test-entitied)
(require 'workflo.macros.test-entities)
(require 'workflo.macros.entity.test-entities)
(workflo.macros.entity/registered-entities)
(entity-schema 'author)
(require 'workflo.macros.entity.test-entities)
(require 'workflo.macros.entity.test-entities :reload)
(workflo.macros.entity/registered-entities)
(workflo.macros.entity.entity-refs)
(workflo.macros.entity.refs)
(workflo.macros.entity/entity-refs)
(workflo.macros.entity/entity-refs 'post)
(entity-schema ('author (workflo.macros.entity/registered-entities)))
(entity-schema ('post (workflo.macros.entity/registered-entities)))
(workflo.macros.entity/entity-refs 'post)
(require 'workflo.macros.entity.test-entities :reload)
(require 'workflo.macros.entity.schema :reload)
(in-ns 'workflo.macros.entity.schema)
(entity-schema ('post (workflo.macros.entity/registered-entities)))
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.test-entities :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.test-entities :reload)
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.schema :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(s/describe :post/author)
:post/author
(s/get-spec :post/author)
(s/and-spec? (s/get-spec :post/author))
(s/and? (s/get-spec :post/author))
(clojure.spec.alpha/and? (s/get-spec :post/author))
clojure.spec.alpha/and
(s/get-spec :post/author)
(map identity (s/get-spec :post/author))
(s/describe :post/author)
(second (s/describe :post/author))
(eval (second (s/describe :post/author)))
(require '[workflo.macros.specs.types :refer [entity-ref])
(require '[workflo.macros.specs.types :refer [entity-ref]])
(eval (second (s/describe :post/author)))
(eval (second (s/describe :post/comments)))
(s/describe :post/comments)
(s/describe :post/author)
(eval (second (s/describe :post/author)))
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(eval (second (s/describe :post/author)))
(s/describe :post/comments)
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(s/describe :post/comments)
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(s/describe :post/comments)
(require 'workflo.macros.entity.test-entities :reload)
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(require 'workflo.macros.entity.test-entities :reload)
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(require 'workflo.macros.entity.test-entities :reload)
`'~foo`
(def foo :foo)
(macroexpand-1 `foo)
(macroexpand-1 `'~foo)
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(require 'workflo.macros.entity.test-entities :reload)
(s/describe :post/comments)
(s/describe :post/author)
(second (s/describe :post/author))
(eval (second (s/describe :post/author)))
(require 'workflo.macros.entity.schema :reload)
(eval (second (s/describe :post/author)))
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(require 'workflo.macros.entity.test-entities :reload)
(require 'workflo.macros.entity.schema :reload)
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(require 'workflo.macros.entity.test-entities :reload)
(require 'workflo.macros.entity.schema :reload)
(require '[workflo.macros.specs.types :refer [entity-ref]] :reload)
(require 'workflo.macros.entity.test-entities :reload)
(s/describe :post/author)
(s/describe :post/comments)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(require 'workflo.macros.entity.test-entities :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(unquote (quote :foo))
(require 'workflo.macros.entity.schema :reload)
(require 'workflo.macros.entity.test-entities :reload)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(s/describe :post/comments)
(s/describe :post/author)
(entity-refs ('post (workflo.macros.entity/registered-entities)))
(doc when)
(doc if)
(doc require)
(doc when)
(macroexpand `(defn foo [] (println "Foo")))
(macroexpand '(defn foo [] (println "Foo")))
(macroexpand-1 '(defn foo [] (println "Foo")))
(macroexpand-1 '(when foo (println "Foo")))
(macroexpand-1 '(require [clojure.string :as str]))
(macroexpand-1 '(when foo (println "Foo")))
(macroexpand '(require [clojure.string :as str]))
(macroexpand '(when foo (println "Foo")))
(macroexpand '(-> foo bar (baz :1 :2) ruux))
(macroexpand '(->> foo bar (baz :1 :2) ruux))
(macroexpand '(->> [:a :b] (map str) (into #{})))
(macroexpand '(as-> [1 2 3] numbers (map inc numbers) (reduce + 0 numbers))
)
(macroexpand '(as-> [1 2 3] numbers (map inc numbers) (reduce + 0 numbers)))
